// <auto-generated />
using System;
using EFCoreJsonApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreJsonApp.Migrations.JsonData
{
    [DbContext(typeof(JsonDataContext))]
    [Migration("20230530064906_add timestamp")]
    partial class addtimestamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreJsonApp.Models.OrderDetails.OrderCount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalOrder")
                        .HasColumnType("int");

                    b.ToTable("OrderCount", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.OrderWithOrderDetail.OrderWithOrderDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("OrderWithOrderDetails");
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.AverageOfPriceResult", b =>
                {
                    b.Property<decimal>("AverageOfPrice")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("AverageOfPriceResult", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.AverageOfQuantityResult", b =>
                {
                    b.Property<decimal>("AverageOfQuantity")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("AverageOfQuantityResult", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.MaxPriceResult", b =>
                {
                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("MaxPrice", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.MaxQuantityResult", b =>
                {
                    b.Property<int>("MaximumQuantity")
                        .HasColumnType("int");

                    b.ToTable("MaxQuantity", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.MinPriceResult", b =>
                {
                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("MinPrice", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.MinQuantityResult", b =>
                {
                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("int");

                    b.ToTable("MinQuantity", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.TotalByOrderResult", b =>
                {
                    b.Property<decimal>("TotalByOrderId")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("TotalByOrder", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.TotalOrderByCustomerResult", b =>
                {
                    b.Property<int>("TotalOrderByCustomerId")
                        .HasColumnType("int");

                    b.ToTable("TotalOrderByCustomerResult", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.TotalPriceResult", b =>
                {
                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("TotalPriceResult", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.Records.TotalQuantityResult", b =>
                {
                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.ToTable("TotalQuantityResult", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("EFCoreJsonApp.Models.OrderWithOrderDetail.OrderWithOrderDetailEntity", b =>
                {
                    b.OwnsMany("EFCoreJsonApp.Models.OrderWithOrderDetail.OrderDetailsJson", "OrderDetailsJson", b1 =>
                        {
                            b1.Property<Guid>("OrderWithOrderDetailEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<float>("Price")
                                .HasColumnType("real");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<float>("Total")
                                .HasColumnType("real");

                            b1.HasKey("OrderWithOrderDetailEntityId", "Id");

                            b1.ToTable("OrderWithOrderDetails");

                            b1.ToJson("OrderDetailsJson");

                            b1.WithOwner()
                                .HasForeignKey("OrderWithOrderDetailEntityId");
                        });

                    b.Navigation("OrderDetailsJson");
                });
#pragma warning restore 612, 618
        }
    }
}
